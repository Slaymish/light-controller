name: Compile Firmware and Check Size

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  compile-firmware:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Arduino CLI
        run: |
          # Install Arduino CLI
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
          sudo mv bin/arduino-cli /usr/local/bin/
          arduino-cli config init
          arduino-cli core update-index
          arduino-cli core install esp32:esp32

          # Install standard library dependencies
          arduino-cli lib install "ESPAsyncWebServer"
          arduino-cli lib install "AsyncTCP"
          arduino-cli lib install "ElegantOTA"

          # Clone AiEsp32RotaryEncoder with the correct repo URL
          mkdir -p ~/Arduino/libraries
          git clone --depth 1 https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/igorantolic/ai-esp32-rotary-encoder.git ~/Arduino/libraries/AiEsp32RotaryEncoder

          # Clone any custom libraries (e.g., Tapo API)
          git clone --depth 1 https://github.com/Slaymish/tapo-esp32.git ~/Arduino/libraries/tapo-esp32

      - name: Generate env.h
        run: |
          chmod +x generate_env_header.sh
          bash generate_env_header.sh

      - name: Compile Sketch
        run: |
          arduino-cli compile \
            --fqbn esp32:esp32:esp32 \
            light-controller/light-controller.ino \
            --output-dir /tmp/build_output

      - name: Report Binary Size
        run: |
          # Re-run compile with --show-properties to grab the size in bytes
          SIZE_BYTES=$(
            arduino-cli compile \
              --fqbn esp32:esp32:esp32 \
              light-controller/light-controller.ino \
              --show-properties sketch,size.total_bytes \
              | grep "size.total_bytes" \
              | cut -d '=' -f2 \
              | tr -d '[:space:]'
          )
          SIZE_KB=$(echo "scale=2; $SIZE_BYTES / 1024" | bc)
          echo "Binary size: $SIZE_BYTES bytes ($SIZE_KB KB)"

          # Optionally fail if size exceeds 1 MB (1,048,576 bytes)
          # MAX_SIZE=1048576
          # if [ "$SIZE_BYTES" -gt "$MAX_SIZE" ]; then
          #   echo "Error: Binary size ($SIZE_BYTES bytes) exceeds maximum allowed ($MAX_SIZE bytes)."
          #   exit 1
          # fi
